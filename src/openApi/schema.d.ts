/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/spec.json": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** The Open API spec for this api */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example https://spec.openapis.org/oas/v3.1.0.html */
                        "application/json": unknown;
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/link-definitions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** The definition of all possible relations */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["link-definitions"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/uuids/{amount}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Generate new UUIDs according to the Responsum format */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description The amount of uuids to generate */
                    amount: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/link": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all links */
        get: {
            parameters: {
                query?: {
                    /** @description Link UUIDs to filter on */
                    uuids?: string;
                    /** @description Linked model UUIDs to filter on */
                    "model-uuids"?: string;
                    /** @description Link relation names to filter on */
                    "relation-names"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["link"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete existing links */
        delete: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            /** @description Delete links with given uuids */
            requestBody: {
                content: {
                    "application/json": string[];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/version/{modelType}/{modelUuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all versions for a given model */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description Type of the model */
                    modelType: components["schemas"]["modelType"];
                    /** @description UUID of the model */
                    modelUuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["version-result"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/version/{modelType}/{modelUuid}/freeze": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Freeze unversioned changes on a given model */
        post: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description Type of the model */
                    modelType: components["schemas"]["modelType"];
                    /** @description UUID of the model */
                    modelUuid: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The name to give to the new version. If not provided, one will be generated */
                        versionName?: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["version-result"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/version/{modelType}/{modelUuid}/request-approval": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Request approval of a specific version on a given model */
        put: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description Type of the model */
                    modelType: components["schemas"]["modelType"];
                    /** @description UUID of the model */
                    modelUuid: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The uuid of version on this model you want to request approval for */
                        versionUuid?: string;
                        /** @description The uuid of the user-account that you want to request to review this version */
                        accountableUserUuid?: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["version-result"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/version/{modelType}/{modelUuid}/approve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Approve a specific version on a given model */
        put: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description Type of the model */
                    modelType: components["schemas"]["modelType"];
                    /** @description UUID of the model */
                    modelUuid: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The uuid of version on this model you want to approve */
                        versionUuid?: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["version-result"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/version/{modelType}/{modelUuid}/reject": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Reject a specific version on a given model */
        put: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description Type of the model */
                    modelType: components["schemas"]["modelType"];
                    /** @description UUID of the model */
                    modelUuid: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The uuid of version on this model you want to reject */
                        versionUuid?: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["version-result"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create new models and links */
        post: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            /** @description Create new models and links. */
            requestBody: {
                content: {
                    "application/json": (components["schemas"]["link"] | components["schemas"]["ad-sync-configuration"] | components["schemas"]["additional-incident-parameter"] | components["schemas"]["advice"] | components["schemas"]["agreement"] | components["schemas"]["agreement-role"] | components["schemas"]["agreement-status"] | components["schemas"]["agreement-version"] | components["schemas"]["api-webhook"] | components["schemas"]["assessment"] | components["schemas"]["balancing-test"] | components["schemas"]["category"] | components["schemas"]["consequence"] | components["schemas"]["consequence-type"] | components["schemas"]["control"] | components["schemas"]["control-requirement"] | components["schemas"]["control-requirement-applicability-justification"] | components["schemas"]["control-requirement-status"] | components["schemas"]["cost-currency"] | components["schemas"]["cost-frequency"] | components["schemas"]["country"] | components["schemas"]["course"] | components["schemas"]["course-category"] | components["schemas"]["custom-link-definition"] | components["schemas"]["data-access-type"] | components["schemas"]["data-attribute"] | components["schemas"]["data-classification"] | components["schemas"]["data-disclosure-type"] | components["schemas"]["data-object"] | components["schemas"]["data-protection-impact"] | components["schemas"]["data-protection-impact-status"] | components["schemas"]["data-subject-request"] | components["schemas"]["data-subject-request-source"] | components["schemas"]["data-subject-request-status"] | components["schemas"]["data-subject-request-type"] | components["schemas"]["data-subject-type"] | components["schemas"]["data-transfer-format"] | components["schemas"]["enrollment"] | components["schemas"]["enrolment-automation"] | components["schemas"]["entity-role"] | components["schemas"]["entity-type"] | components["schemas"]["evaluation-type"] | components["schemas"]["event"] | components["schemas"]["evidence"] | components["schemas"]["export-configuration"] | components["schemas"]["file"] | components["schemas"]["form"] | components["schemas"]["framework-section"] | components["schemas"]["global-tenant"] | components["schemas"]["impact-level"] | components["schemas"]["incident"] | components["schemas"]["incident-category"] | components["schemas"]["incident-data-subject"] | components["schemas"]["incident-status"] | components["schemas"]["information-management-system"] | components["schemas"]["information-management-system-status"] | components["schemas"]["information-management-system-type"] | components["schemas"]["justification"] | components["schemas"]["legal-basis"] | components["schemas"]["legal-ground"] | components["schemas"]["legal-obligation"] | components["schemas"]["legal-template"] | components["schemas"]["legal-template-type"] | components["schemas"]["legal-template-version"] | components["schemas"]["legislation"] | components["schemas"]["milestone"] | components["schemas"]["mitigation"] | components["schemas"]["mitigation-status"] | components["schemas"]["organizational-unit"] | components["schemas"]["permission"] | components["schemas"]["personnel-function"] | components["schemas"]["phishing-attempt"] | components["schemas"]["phishing-campaign"] | components["schemas"]["policy"] | components["schemas"]["policy-type"] | components["schemas"]["policy-version"] | components["schemas"]["probability-level"] | components["schemas"]["process"] | components["schemas"]["processed-data-lifecycle"] | components["schemas"]["processing-activity"] | components["schemas"]["project"] | components["schemas"]["project-status"] | components["schemas"]["reporting-widget"] | components["schemas"]["risk"] | components["schemas"]["risk-category"] | components["schemas"]["risk-handling-method"] | components["schemas"]["risk-level"] | components["schemas"]["risk-threat"] | components["schemas"]["risk-type"] | components["schemas"]["sector"] | components["schemas"]["security-asset"] | components["schemas"]["stakeholder"] | components["schemas"]["stakeholder-contact"] | components["schemas"]["tag"] | components["schemas"]["task"] | components["schemas"]["task-priority"] | components["schemas"]["task-status"] | components["schemas"]["transfer-impact-assessment"] | components["schemas"]["transfer-mechanism"] | components["schemas"]["user-account"] | components["schemas"]["user-group"] | components["schemas"]["user-specific-access"] | components["schemas"]["version-history"] | components["schemas"]["widget-dashboard"])[];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": (components["schemas"]["link"] | components["schemas"]["ad-sync-configuration"] | components["schemas"]["additional-incident-parameter"] | components["schemas"]["advice"] | components["schemas"]["agreement"] | components["schemas"]["agreement-role"] | components["schemas"]["agreement-status"] | components["schemas"]["agreement-version"] | components["schemas"]["api-webhook"] | components["schemas"]["assessment"] | components["schemas"]["balancing-test"] | components["schemas"]["category"] | components["schemas"]["consequence"] | components["schemas"]["consequence-type"] | components["schemas"]["control"] | components["schemas"]["control-requirement"] | components["schemas"]["control-requirement-applicability-justification"] | components["schemas"]["control-requirement-status"] | components["schemas"]["cost-currency"] | components["schemas"]["cost-frequency"] | components["schemas"]["country"] | components["schemas"]["course"] | components["schemas"]["course-category"] | components["schemas"]["custom-link-definition"] | components["schemas"]["data-access-type"] | components["schemas"]["data-attribute"] | components["schemas"]["data-classification"] | components["schemas"]["data-disclosure-type"] | components["schemas"]["data-object"] | components["schemas"]["data-protection-impact"] | components["schemas"]["data-protection-impact-status"] | components["schemas"]["data-subject-request"] | components["schemas"]["data-subject-request-source"] | components["schemas"]["data-subject-request-status"] | components["schemas"]["data-subject-request-type"] | components["schemas"]["data-subject-type"] | components["schemas"]["data-transfer-format"] | components["schemas"]["enrollment"] | components["schemas"]["enrolment-automation"] | components["schemas"]["entity-role"] | components["schemas"]["entity-type"] | components["schemas"]["evaluation-type"] | components["schemas"]["event"] | components["schemas"]["evidence"] | components["schemas"]["export-configuration"] | components["schemas"]["file"] | components["schemas"]["form"] | components["schemas"]["framework-section"] | components["schemas"]["global-tenant"] | components["schemas"]["impact-level"] | components["schemas"]["incident"] | components["schemas"]["incident-category"] | components["schemas"]["incident-data-subject"] | components["schemas"]["incident-status"] | components["schemas"]["information-management-system"] | components["schemas"]["information-management-system-status"] | components["schemas"]["information-management-system-type"] | components["schemas"]["justification"] | components["schemas"]["legal-basis"] | components["schemas"]["legal-ground"] | components["schemas"]["legal-obligation"] | components["schemas"]["legal-template"] | components["schemas"]["legal-template-type"] | components["schemas"]["legal-template-version"] | components["schemas"]["legislation"] | components["schemas"]["milestone"] | components["schemas"]["mitigation"] | components["schemas"]["mitigation-status"] | components["schemas"]["organizational-unit"] | components["schemas"]["permission"] | components["schemas"]["personnel-function"] | components["schemas"]["phishing-attempt"] | components["schemas"]["phishing-campaign"] | components["schemas"]["policy"] | components["schemas"]["policy-type"] | components["schemas"]["policy-version"] | components["schemas"]["probability-level"] | components["schemas"]["process"] | components["schemas"]["processed-data-lifecycle"] | components["schemas"]["processing-activity"] | components["schemas"]["project"] | components["schemas"]["project-status"] | components["schemas"]["reporting-widget"] | components["schemas"]["risk"] | components["schemas"]["risk-category"] | components["schemas"]["risk-handling-method"] | components["schemas"]["risk-level"] | components["schemas"]["risk-threat"] | components["schemas"]["risk-type"] | components["schemas"]["sector"] | components["schemas"]["security-asset"] | components["schemas"]["stakeholder"] | components["schemas"]["stakeholder-contact"] | components["schemas"]["tag"] | components["schemas"]["task"] | components["schemas"]["task-priority"] | components["schemas"]["task-status"] | components["schemas"]["transfer-impact-assessment"] | components["schemas"]["transfer-mechanism"] | components["schemas"]["user-account"] | components["schemas"]["user-group"] | components["schemas"]["user-specific-access"] | components["schemas"]["version-history"] | components["schemas"]["widget-dashboard"])[];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Conflict */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update existing models and add new links */
        patch: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            /** @description Models to update and links to add. */
            requestBody: {
                content: {
                    "application/json": (components["schemas"]["link"] | components["schemas"]["ad-sync-configuration"] | components["schemas"]["additional-incident-parameter"] | components["schemas"]["advice"] | components["schemas"]["agreement"] | components["schemas"]["agreement-role"] | components["schemas"]["agreement-status"] | components["schemas"]["agreement-version"] | components["schemas"]["api-webhook"] | components["schemas"]["assessment"] | components["schemas"]["balancing-test"] | components["schemas"]["category"] | components["schemas"]["consequence"] | components["schemas"]["consequence-type"] | components["schemas"]["control"] | components["schemas"]["control-requirement"] | components["schemas"]["control-requirement-applicability-justification"] | components["schemas"]["control-requirement-status"] | components["schemas"]["cost-currency"] | components["schemas"]["cost-frequency"] | components["schemas"]["country"] | components["schemas"]["course"] | components["schemas"]["course-category"] | components["schemas"]["custom-link-definition"] | components["schemas"]["data-access-type"] | components["schemas"]["data-attribute"] | components["schemas"]["data-classification"] | components["schemas"]["data-disclosure-type"] | components["schemas"]["data-object"] | components["schemas"]["data-protection-impact"] | components["schemas"]["data-protection-impact-status"] | components["schemas"]["data-subject-request"] | components["schemas"]["data-subject-request-source"] | components["schemas"]["data-subject-request-status"] | components["schemas"]["data-subject-request-type"] | components["schemas"]["data-subject-type"] | components["schemas"]["data-transfer-format"] | components["schemas"]["enrollment"] | components["schemas"]["enrolment-automation"] | components["schemas"]["entity-role"] | components["schemas"]["entity-type"] | components["schemas"]["evaluation-type"] | components["schemas"]["event"] | components["schemas"]["evidence"] | components["schemas"]["export-configuration"] | components["schemas"]["file"] | components["schemas"]["form"] | components["schemas"]["framework-section"] | components["schemas"]["global-tenant"] | components["schemas"]["impact-level"] | components["schemas"]["incident"] | components["schemas"]["incident-category"] | components["schemas"]["incident-data-subject"] | components["schemas"]["incident-status"] | components["schemas"]["information-management-system"] | components["schemas"]["information-management-system-status"] | components["schemas"]["information-management-system-type"] | components["schemas"]["justification"] | components["schemas"]["legal-basis"] | components["schemas"]["legal-ground"] | components["schemas"]["legal-obligation"] | components["schemas"]["legal-template"] | components["schemas"]["legal-template-type"] | components["schemas"]["legal-template-version"] | components["schemas"]["legislation"] | components["schemas"]["milestone"] | components["schemas"]["mitigation"] | components["schemas"]["mitigation-status"] | components["schemas"]["organizational-unit"] | components["schemas"]["permission"] | components["schemas"]["personnel-function"] | components["schemas"]["phishing-attempt"] | components["schemas"]["phishing-campaign"] | components["schemas"]["policy"] | components["schemas"]["policy-type"] | components["schemas"]["policy-version"] | components["schemas"]["probability-level"] | components["schemas"]["process"] | components["schemas"]["processed-data-lifecycle"] | components["schemas"]["processing-activity"] | components["schemas"]["project"] | components["schemas"]["project-status"] | components["schemas"]["reporting-widget"] | components["schemas"]["risk"] | components["schemas"]["risk-category"] | components["schemas"]["risk-handling-method"] | components["schemas"]["risk-level"] | components["schemas"]["risk-threat"] | components["schemas"]["risk-type"] | components["schemas"]["sector"] | components["schemas"]["security-asset"] | components["schemas"]["stakeholder"] | components["schemas"]["stakeholder-contact"] | components["schemas"]["tag"] | components["schemas"]["task"] | components["schemas"]["task-priority"] | components["schemas"]["task-status"] | components["schemas"]["transfer-impact-assessment"] | components["schemas"]["transfer-mechanism"] | components["schemas"]["user-account"] | components["schemas"]["user-group"] | components["schemas"]["user-specific-access"] | components["schemas"]["version-history"] | components["schemas"]["widget-dashboard"])[];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": (components["schemas"]["link"] | components["schemas"]["ad-sync-configuration"] | components["schemas"]["additional-incident-parameter"] | components["schemas"]["advice"] | components["schemas"]["agreement"] | components["schemas"]["agreement-role"] | components["schemas"]["agreement-status"] | components["schemas"]["agreement-version"] | components["schemas"]["api-webhook"] | components["schemas"]["assessment"] | components["schemas"]["balancing-test"] | components["schemas"]["category"] | components["schemas"]["consequence"] | components["schemas"]["consequence-type"] | components["schemas"]["control"] | components["schemas"]["control-requirement"] | components["schemas"]["control-requirement-applicability-justification"] | components["schemas"]["control-requirement-status"] | components["schemas"]["cost-currency"] | components["schemas"]["cost-frequency"] | components["schemas"]["country"] | components["schemas"]["course"] | components["schemas"]["course-category"] | components["schemas"]["custom-link-definition"] | components["schemas"]["data-access-type"] | components["schemas"]["data-attribute"] | components["schemas"]["data-classification"] | components["schemas"]["data-disclosure-type"] | components["schemas"]["data-object"] | components["schemas"]["data-protection-impact"] | components["schemas"]["data-protection-impact-status"] | components["schemas"]["data-subject-request"] | components["schemas"]["data-subject-request-source"] | components["schemas"]["data-subject-request-status"] | components["schemas"]["data-subject-request-type"] | components["schemas"]["data-subject-type"] | components["schemas"]["data-transfer-format"] | components["schemas"]["enrollment"] | components["schemas"]["enrolment-automation"] | components["schemas"]["entity-role"] | components["schemas"]["entity-type"] | components["schemas"]["evaluation-type"] | components["schemas"]["event"] | components["schemas"]["evidence"] | components["schemas"]["export-configuration"] | components["schemas"]["file"] | components["schemas"]["form"] | components["schemas"]["framework-section"] | components["schemas"]["global-tenant"] | components["schemas"]["impact-level"] | components["schemas"]["incident"] | components["schemas"]["incident-category"] | components["schemas"]["incident-data-subject"] | components["schemas"]["incident-status"] | components["schemas"]["information-management-system"] | components["schemas"]["information-management-system-status"] | components["schemas"]["information-management-system-type"] | components["schemas"]["justification"] | components["schemas"]["legal-basis"] | components["schemas"]["legal-ground"] | components["schemas"]["legal-obligation"] | components["schemas"]["legal-template"] | components["schemas"]["legal-template-type"] | components["schemas"]["legal-template-version"] | components["schemas"]["legislation"] | components["schemas"]["milestone"] | components["schemas"]["mitigation"] | components["schemas"]["mitigation-status"] | components["schemas"]["organizational-unit"] | components["schemas"]["permission"] | components["schemas"]["personnel-function"] | components["schemas"]["phishing-attempt"] | components["schemas"]["phishing-campaign"] | components["schemas"]["policy"] | components["schemas"]["policy-type"] | components["schemas"]["policy-version"] | components["schemas"]["probability-level"] | components["schemas"]["process"] | components["schemas"]["processed-data-lifecycle"] | components["schemas"]["processing-activity"] | components["schemas"]["project"] | components["schemas"]["project-status"] | components["schemas"]["reporting-widget"] | components["schemas"]["risk"] | components["schemas"]["risk-category"] | components["schemas"]["risk-handling-method"] | components["schemas"]["risk-level"] | components["schemas"]["risk-threat"] | components["schemas"]["risk-type"] | components["schemas"]["sector"] | components["schemas"]["security-asset"] | components["schemas"]["stakeholder"] | components["schemas"]["stakeholder-contact"] | components["schemas"]["tag"] | components["schemas"]["task"] | components["schemas"]["task-priority"] | components["schemas"]["task-status"] | components["schemas"]["transfer-impact-assessment"] | components["schemas"]["transfer-mechanism"] | components["schemas"]["user-account"] | components["schemas"]["user-group"] | components["schemas"]["user-specific-access"] | components["schemas"]["version-history"] | components["schemas"]["widget-dashboard"])[];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Conflict */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/ad-sync-configuration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all ad-sync-configuration */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ad-sync-configuration"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ad-sync-configuration/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one ad-sync-configuration */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the ad-sync-configuration */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ad-sync-configuration"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/additional-incident-parameter": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all additional-incident-parameter */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["additional-incident-parameter"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/additional-incident-parameter/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one additional-incident-parameter */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the additional-incident-parameter */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["additional-incident-parameter"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/advice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all advice */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["advice"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/advice/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one advice */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the advice */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["advice"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/agreement": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all agreement */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["agreement"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/agreement/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one agreement */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the agreement */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["agreement"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/agreement-role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all agreement-role */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["agreement-role"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/agreement-role/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one agreement-role */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the agreement-role */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["agreement-role"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/agreement-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all agreement-status */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["agreement-status"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/agreement-status/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one agreement-status */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the agreement-status */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["agreement-status"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/agreement-version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all agreement-version */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["agreement-version"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/agreement-version/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one agreement-version */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the agreement-version */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["agreement-version"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api-webhook": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all api-webhook */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api-webhook"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api-webhook/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one api-webhook */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the api-webhook */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api-webhook"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assessment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all assessment */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["assessment"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assessment/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one assessment */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the assessment */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["assessment"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/balancing-test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all balancing-test */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["balancing-test"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/balancing-test/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one balancing-test */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the balancing-test */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["balancing-test"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/category": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all category */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["category"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/category/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one category */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the category */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["category"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all comment */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["comment"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comment/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one comment */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the comment */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["comment"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comment-thread": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all comment-thread */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["comment-thread"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comment-thread/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one comment-thread */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the comment-thread */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["comment-thread"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/consequence": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all consequence */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["consequence"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/consequence/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one consequence */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the consequence */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["consequence"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/consequence-type": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all consequence-type */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["consequence-type"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/consequence-type/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one consequence-type */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the consequence-type */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["consequence-type"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/control": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all control */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["control"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/control/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one control */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the control */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["control"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/control-requirement": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all control-requirement */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["control-requirement"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/control-requirement/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one control-requirement */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the control-requirement */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["control-requirement"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/control-requirement-applicability-justification": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all control-requirement-applicability-justification */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["control-requirement-applicability-justification"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/control-requirement-applicability-justification/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one control-requirement-applicability-justification */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the control-requirement-applicability-justification */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["control-requirement-applicability-justification"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/control-requirement-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all control-requirement-status */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["control-requirement-status"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/control-requirement-status/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one control-requirement-status */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the control-requirement-status */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["control-requirement-status"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cost-currency": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all cost-currency */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cost-currency"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cost-currency/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one cost-currency */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the cost-currency */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cost-currency"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cost-frequency": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all cost-frequency */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cost-frequency"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cost-frequency/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one cost-frequency */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the cost-frequency */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cost-frequency"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/country": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all country */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["country"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/country/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one country */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the country */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["country"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/course": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all course */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["course"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/course/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one course */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the course */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["course"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/course-category": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all course-category */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["course-category"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/course-category/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one course-category */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the course-category */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["course-category"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/custom-link-definition": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all custom-link-definition */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["custom-link-definition"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/custom-link-definition/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one custom-link-definition */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the custom-link-definition */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["custom-link-definition"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/data-access-type": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all data-access-type */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["data-access-type"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/data-access-type/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one data-access-type */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the data-access-type */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["data-access-type"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/data-attribute": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all data-attribute */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["data-attribute"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/data-attribute/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one data-attribute */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the data-attribute */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["data-attribute"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/data-classification": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all data-classification */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["data-classification"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/data-classification/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one data-classification */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the data-classification */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["data-classification"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/data-disclosure-type": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all data-disclosure-type */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["data-disclosure-type"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/data-disclosure-type/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one data-disclosure-type */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the data-disclosure-type */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["data-disclosure-type"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/data-object": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all data-object */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["data-object"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/data-object/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one data-object */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the data-object */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["data-object"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/data-protection-impact": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all data-protection-impact */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["data-protection-impact"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/data-protection-impact/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one data-protection-impact */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the data-protection-impact */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["data-protection-impact"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/data-protection-impact-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all data-protection-impact-status */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["data-protection-impact-status"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/data-protection-impact-status/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one data-protection-impact-status */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the data-protection-impact-status */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["data-protection-impact-status"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/data-subject-request": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all data-subject-request */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["data-subject-request"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/data-subject-request/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one data-subject-request */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the data-subject-request */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["data-subject-request"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/data-subject-request-source": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all data-subject-request-source */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["data-subject-request-source"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/data-subject-request-source/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one data-subject-request-source */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the data-subject-request-source */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["data-subject-request-source"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/data-subject-request-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all data-subject-request-status */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["data-subject-request-status"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/data-subject-request-status/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one data-subject-request-status */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the data-subject-request-status */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["data-subject-request-status"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/data-subject-request-type": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all data-subject-request-type */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["data-subject-request-type"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/data-subject-request-type/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one data-subject-request-type */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the data-subject-request-type */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["data-subject-request-type"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/data-subject-type": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all data-subject-type */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["data-subject-type"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/data-subject-type/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one data-subject-type */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the data-subject-type */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["data-subject-type"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/data-transfer-format": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all data-transfer-format */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["data-transfer-format"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/data-transfer-format/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one data-transfer-format */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the data-transfer-format */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["data-transfer-format"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enrollment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all enrollment */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["enrollment"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enrollment/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one enrollment */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the enrollment */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["enrollment"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enrolment-automation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all enrolment-automation */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["enrolment-automation"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enrolment-automation/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one enrolment-automation */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the enrolment-automation */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["enrolment-automation"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entity-role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all entity-role */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["entity-role"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entity-role/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one entity-role */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the entity-role */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["entity-role"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entity-type": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all entity-type */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["entity-type"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entity-type/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one entity-type */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the entity-type */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["entity-type"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/evaluation-type": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all evaluation-type */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["evaluation-type"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/evaluation-type/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one evaluation-type */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the evaluation-type */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["evaluation-type"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/event": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all event */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["event"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/event/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one event */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the event */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["event"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/evidence": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all evidence */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["evidence"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/evidence/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one evidence */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the evidence */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["evidence"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/export-configuration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all export-configuration */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["export-configuration"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/export-configuration/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one export-configuration */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the export-configuration */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["export-configuration"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all file */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["file"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one file */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the file */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["file"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/form": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all form */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["form"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/form/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one form */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the form */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["form"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/framework-section": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all framework-section */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["framework-section"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/framework-section/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one framework-section */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the framework-section */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["framework-section"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/global-tenant": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all global-tenant */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["global-tenant"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/global-tenant/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one global-tenant */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the global-tenant */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["global-tenant"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/impact-level": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all impact-level */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["impact-level"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/impact-level/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one impact-level */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the impact-level */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["impact-level"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/incident": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all incident */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["incident"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/incident/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one incident */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the incident */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["incident"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/incident-category": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all incident-category */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["incident-category"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/incident-category/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one incident-category */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the incident-category */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["incident-category"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/incident-data-subject": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all incident-data-subject */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["incident-data-subject"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/incident-data-subject/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one incident-data-subject */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the incident-data-subject */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["incident-data-subject"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/incident-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all incident-status */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["incident-status"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/incident-status/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one incident-status */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the incident-status */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["incident-status"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/information-management-system": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all information-management-system */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["information-management-system"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/information-management-system/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one information-management-system */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the information-management-system */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["information-management-system"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/information-management-system-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all information-management-system-status */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["information-management-system-status"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/information-management-system-status/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one information-management-system-status */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the information-management-system-status */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["information-management-system-status"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/information-management-system-type": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all information-management-system-type */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["information-management-system-type"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/information-management-system-type/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one information-management-system-type */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the information-management-system-type */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["information-management-system-type"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/justification": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all justification */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["justification"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/justification/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one justification */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the justification */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["justification"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/legal-basis": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all legal-basis */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["legal-basis"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/legal-basis/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one legal-basis */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the legal-basis */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["legal-basis"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/legal-ground": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all legal-ground */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["legal-ground"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/legal-ground/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one legal-ground */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the legal-ground */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["legal-ground"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/legal-obligation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all legal-obligation */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["legal-obligation"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/legal-obligation/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one legal-obligation */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the legal-obligation */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["legal-obligation"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/legal-template": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all legal-template */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["legal-template"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/legal-template/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one legal-template */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the legal-template */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["legal-template"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/legal-template-type": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all legal-template-type */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["legal-template-type"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/legal-template-type/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one legal-template-type */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the legal-template-type */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["legal-template-type"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/legal-template-version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all legal-template-version */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["legal-template-version"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/legal-template-version/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one legal-template-version */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the legal-template-version */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["legal-template-version"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/legislation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all legislation */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["legislation"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/legislation/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one legislation */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the legislation */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["legislation"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/milestone": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all milestone */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["milestone"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/milestone/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one milestone */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the milestone */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["milestone"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/mitigation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all mitigation */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["mitigation"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/mitigation/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one mitigation */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the mitigation */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["mitigation"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/mitigation-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all mitigation-status */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["mitigation-status"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/mitigation-status/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one mitigation-status */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the mitigation-status */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["mitigation-status"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notification": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all notification */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["notification"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notification/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one notification */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the notification */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["notification"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizational-unit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all organizational-unit */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["organizational-unit"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizational-unit/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one organizational-unit */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the organizational-unit */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["organizational-unit"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/permission": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all permission */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["permission"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/permission/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one permission */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the permission */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["permission"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/personnel-function": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all personnel-function */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["personnel-function"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/personnel-function/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one personnel-function */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the personnel-function */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["personnel-function"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/phishing-attempt": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all phishing-attempt */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["phishing-attempt"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/phishing-attempt/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one phishing-attempt */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the phishing-attempt */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["phishing-attempt"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/phishing-campaign": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all phishing-campaign */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["phishing-campaign"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/phishing-campaign/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one phishing-campaign */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the phishing-campaign */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["phishing-campaign"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/policy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all policy */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["policy"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/policy/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one policy */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the policy */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["policy"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/policy-type": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all policy-type */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["policy-type"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/policy-type/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one policy-type */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the policy-type */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["policy-type"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/policy-version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all policy-version */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["policy-version"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/policy-version/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one policy-version */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the policy-version */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["policy-version"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/probability-level": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all probability-level */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["probability-level"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/probability-level/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one probability-level */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the probability-level */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["probability-level"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/process": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all process */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["process"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/process/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one process */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the process */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["process"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/processed-data-lifecycle": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all processed-data-lifecycle */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["processed-data-lifecycle"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/processed-data-lifecycle/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one processed-data-lifecycle */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the processed-data-lifecycle */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["processed-data-lifecycle"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/processing-activity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all processing-activity */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["processing-activity"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/processing-activity/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one processing-activity */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the processing-activity */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["processing-activity"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/project": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all project */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["project"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/project/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one project */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the project */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["project"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/project-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all project-status */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["project-status"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/project-status/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one project-status */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the project-status */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["project-status"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reporting-widget": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all reporting-widget */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["reporting-widget"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reporting-widget/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one reporting-widget */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the reporting-widget */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["reporting-widget"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/risk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all risk */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["risk"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/risk/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one risk */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the risk */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["risk"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/risk-category": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all risk-category */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["risk-category"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/risk-category/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one risk-category */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the risk-category */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["risk-category"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/risk-handling-method": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all risk-handling-method */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["risk-handling-method"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/risk-handling-method/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one risk-handling-method */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the risk-handling-method */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["risk-handling-method"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/risk-level": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all risk-level */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["risk-level"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/risk-level/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one risk-level */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the risk-level */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["risk-level"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/risk-threat": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all risk-threat */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["risk-threat"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/risk-threat/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one risk-threat */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the risk-threat */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["risk-threat"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/risk-type": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all risk-type */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["risk-type"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/risk-type/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one risk-type */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the risk-type */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["risk-type"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sector": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all sector */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["sector"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sector/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one sector */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the sector */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["sector"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/security-asset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all security-asset */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["security-asset"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/security-asset/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one security-asset */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the security-asset */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["security-asset"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stakeholder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all stakeholder */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["stakeholder"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stakeholder/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one stakeholder */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the stakeholder */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["stakeholder"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stakeholder-contact": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all stakeholder-contact */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["stakeholder-contact"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stakeholder-contact/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one stakeholder-contact */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the stakeholder-contact */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["stakeholder-contact"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/suggestion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all suggestion */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["suggestion"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/suggestion/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one suggestion */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the suggestion */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["suggestion"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tag": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all tag */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["tag"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tag/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one tag */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the tag */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["tag"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/task": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all task */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["task"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/task/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one task */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the task */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["task"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/task-priority": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all task-priority */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["task-priority"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/task-priority/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one task-priority */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the task-priority */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["task-priority"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/task-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all task-status */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["task-status"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/task-status/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one task-status */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the task-status */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["task-status"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transfer-impact-assessment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all transfer-impact-assessment */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["transfer-impact-assessment"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transfer-impact-assessment/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one transfer-impact-assessment */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the transfer-impact-assessment */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["transfer-impact-assessment"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transfer-mechanism": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all transfer-mechanism */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["transfer-mechanism"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transfer-mechanism/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one transfer-mechanism */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the transfer-mechanism */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["transfer-mechanism"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user-account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all user-account */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["user-account"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user-account/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one user-account */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the user-account */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["user-account"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user-group": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all user-group */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["user-group"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user-group/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one user-group */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the user-group */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["user-group"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user-specific-access": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all user-specific-access */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["user-specific-access"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user-specific-access/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one user-specific-access */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the user-specific-access */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["user-specific-access"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/version-history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all version-history */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["version-history"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/version-history/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one version-history */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the version-history */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["version-history"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/widget-dashboard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of all widget-dashboard */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by one or more properties of the model */
                    "param-filter"?: string;
                };
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["widget-dashboard"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/widget-dashboard/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one widget-dashboard */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Authentication token for the api call */
                    "Api-Token": string;
                };
                path: {
                    /** @description UUID of the widget-dashboard */
                    uuid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["widget-dashboard"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Not authorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Insufficient permission */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error-result"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        period: {
            time?: number;
            /** @enum {string} */
            measurement?: "minutes" | "hours" | "days" | "weeks" | "months" | "years";
            once?: boolean;
        };
        "period-with-rate": {
            rate?: number;
            time?: number;
            /** @enum {string} */
            measurement?: "minutes" | "hours" | "days" | "weeks" | "months" | "years";
        };
        link: {
            /** @description The uuid of this specific link */
            uuid: string;
            /** @constant */
            type: "link";
            /** @description One of the available relation types */
            linkType: string;
            links: {
                /** @description The model type of the model being linked to */
                modelType: components["schemas"]["modelType"];
                /** @description The uuid of the model being linked to */
                modelUuid: components["schemas"]["modelUuid"];
                /** @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter */
                role: string;
            }[];
            /** @description A free form object containing extra data about this specific link. (Rarely used) */
            metaData?: Record<string, never>;
        };
        /**
         * @description Available Responsum model types
         * @enum {string}
         */
        modelType: "ad-sync-configuration" | "additional-incident-parameter" | "advice" | "agreement" | "agreement-role" | "agreement-status" | "agreement-version" | "api-webhook" | "assessment" | "balancing-test" | "category" | "comment" | "comment-thread" | "consequence" | "consequence-type" | "control" | "control-requirement" | "control-requirement-applicability-justification" | "control-requirement-status" | "cost-currency" | "cost-frequency" | "country" | "course" | "course-category" | "custom-link-definition" | "data-access-type" | "data-attribute" | "data-classification" | "data-disclosure-type" | "data-object" | "data-protection-impact" | "data-protection-impact-status" | "data-subject-request" | "data-subject-request-source" | "data-subject-request-status" | "data-subject-request-type" | "data-subject-type" | "data-transfer-format" | "enrollment" | "enrolment-automation" | "entity-role" | "entity-type" | "evaluation-type" | "event" | "evidence" | "export-configuration" | "file" | "form" | "framework-section" | "global-tenant" | "impact-level" | "incident" | "incident-category" | "incident-data-subject" | "incident-status" | "information-management-system" | "information-management-system-status" | "information-management-system-type" | "justification" | "legal-basis" | "legal-ground" | "legal-obligation" | "legal-template" | "legal-template-type" | "legal-template-version" | "legislation" | "milestone" | "mitigation" | "mitigation-status" | "notification" | "organizational-unit" | "permission" | "personnel-function" | "phishing-attempt" | "phishing-campaign" | "policy" | "policy-type" | "policy-version" | "probability-level" | "process" | "processed-data-lifecycle" | "processing-activity" | "project" | "project-status" | "reporting-widget" | "risk" | "risk-category" | "risk-handling-method" | "risk-level" | "risk-threat" | "risk-type" | "sector" | "security-asset" | "stakeholder" | "stakeholder-contact" | "suggestion" | "tag" | "task" | "task-priority" | "task-status" | "transfer-impact-assessment" | "transfer-mechanism" | "user-account" | "user-group" | "user-specific-access" | "version-history" | "widget-dashboard";
        /** @description A form of uuid, required to be at least unique per model, though CUID or UUIDv4 is recommended */
        modelUuid: string;
        /** @description The names of the relations */
        "link-definitions": {
            [key: string]: {
                [key: string]: {
                    modelType: "all-models" | components["schemas"]["modelType"] | components["schemas"]["modelType"][];
                    /** @enum {string} */
                    oneOrMany: "one" | "many";
                    isRequired: boolean;
                    /** @enum {string} */
                    relationBehaviour: "duplicate-linked-object" | "reference-same-object" | "do-not-link";
                };
            };
        };
        "validation-error": {
            [key: string]: {
                type?: string;
                description?: string;
            };
        };
        "error-result": {
            code: string;
            description: string;
            error?: string;
            validation?: components["schemas"]["validation-error"] | {
                [key: string]: components["schemas"]["validation-error"];
            };
        };
        "data-change-history": {
            /** @description The uuid of this data-change-history */
            uuid: string;
            /** @constant */
            type: "data-change-history";
            previousValues?: Record<string, never>;
            newValues: Record<string, never>;
            /** @enum {string} */
            operation: "create" | "update" | "delete" | "merge" | "V2-create" | "import" | "history-restoration" | "update-link";
            /** @description UNIX Timestamp */
            modifiedOn: number;
            /** @description The uuid of the user-account that made the changes. */
            modifiedBy: string;
        };
        "version-history": {
            /** @constant */
            type?: "version-history";
            uuid: string;
            name?: string;
            reviewStatus?: string;
            /** @description UNIX Timestamp */
            submittedOn?: number;
            /** @description UNIX Timestamp */
            reviewedOn?: number;
            readonly creator?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "version-history-creator";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "version-history";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "version-history";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "user-account";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "creator";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
        };
        "version-result": {
            modelType?: components["schemas"]["modelType"];
            /** @description The UUID of the model */
            modelUuid?: string;
            unversionedChanges?: components["schemas"]["data-change-history"][];
            versions?: components["schemas"]["version-history"][];
        };
        "ad-sync-configuration": {
            /** @constant */
            type?: "ad-sync-configuration";
            internalId?: string;
            color?: string;
            uuid: string;
            name?: string;
            filterType?: string;
            filter?: string;
            autoSync?: string;
            clientId?: string;
            clientSecret?: string;
            directoryId?: string;
            initial2faEnabled?: boolean;
            initialIsGuestUser?: boolean;
            isObsolete?: boolean;
            initialPermission?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "permission-ad-sync-configuration";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "permission";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "permission";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "ad-sync-configuration";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "ad-sync-configuration";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            "custom-test"?: string[];
            mapping?: unknown;
            syncStatus?: unknown;
        };
        "additional-incident-parameter": {
            /** @constant */
            type?: "additional-incident-parameter";
            internalId?: string;
            color?: string;
            uuid: string;
            name?: string;
            justification?: string;
            isObsolete?: boolean;
        };
        advice: {
            /** @constant */
            type?: "advice";
            internalId?: string;
            color?: string;
            uuid: string;
            name?: string;
            status?: string;
            request?: string;
            descriptionAndPurpose?: string;
            definitiveAdvice?: string;
            reference?: string;
            isObsolete?: boolean;
            relatedTo?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "advice-all-related-to";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "advice";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "advice";
                } | {
                    /** @description The model type of the model being linked to */
                    modelType: components["schemas"]["modelType"];
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "all";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            function?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "advice-function";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "advice";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "advice";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "personnel-function";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "function";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            owner?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "user-account-model-owner";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "user-account";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "user-account";
                } | {
                    /** @description The model type of the model being linked to */
                    modelType: components["schemas"]["modelType"];
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "owner-model";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            upload?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "advice-file-upload";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "advice";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "advice";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "file";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "file";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            tag?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "tag-model";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "tag";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "tag";
                } | {
                    /** @description The model type of the model being linked to */
                    modelType: components["schemas"]["modelType"];
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "model";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
        };
        agreement: {
            /** @constant */
            type?: "agreement";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            reviewInterval?: components["schemas"]["period"];
            isObsolete?: boolean;
            processingActivity?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "processing-activity-agreement";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "processing-activity";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "processing-activity";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "agreement";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "agreement";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            informationManagementSystem?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "information-management-system-agreement";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "information-management-system";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "information-management-system";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "agreement";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "agreement";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            stakeholder?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "agreement-stakeholder";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "agreement";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "agreement";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "stakeholder";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "stakeholder";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            tag?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "tag-model";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "tag";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "tag";
                } | {
                    /** @description The model type of the model being linked to */
                    modelType: components["schemas"]["modelType"];
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "model";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            agreementStatus?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "agreement-agreement-status";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "agreement";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "agreement";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "agreement-status";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "agreement-status";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            agreementRole?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "agreement-agreement-role";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "agreement";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "agreement";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "agreement-role";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "agreement-role";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            agreementVersions?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "agreement-agreement-version";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "agreement";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "agreement";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "agreement-version";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "agreement-version";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
        };
        "agreement-role": {
            /** @constant */
            type?: "agreement-role";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            isObsolete?: boolean;
        };
        "agreement-status": {
            /** @constant */
            type?: "agreement-status";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            isObsolete?: boolean;
            identifyingColor?: string;
        };
        "agreement-version": {
            /** @constant */
            type?: "agreement-version";
            internalId?: string;
            color?: string;
            uuid: string;
            description?: string;
            createdInternally?: boolean;
            changeNotes?: string;
            externalReference?: string;
            isInvalid?: boolean;
            isReviewed?: boolean;
            notificationStatus?: string;
            /** @description UNIX Timestamp */
            startsFrom?: number;
            /** @description UNIX Timestamp */
            validUntil?: number;
            storageLocation?: string;
            isObsolete?: boolean;
            legalTemplate?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "agreement-version-legal-template";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "agreement-version";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "agreement-version";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "legal-template";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "legal-template";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            versionFile?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "agreement-version-file";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "agreement-version";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "agreement-version";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "file";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "file";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            agreement?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "agreement-agreement-version";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "agreement";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "agreement";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "agreement-version";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "agreement-version";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
        };
        "api-webhook": {
            /** @constant */
            type?: "api-webhook";
            internalId?: string;
            uuid: string;
            name?: string;
            url?: string;
            models?: string[];
            actions?: string[];
            isObsolete?: boolean;
            enabled?: boolean;
            permissionUser?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "api-webhook-user-account-permission-user";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "api-webhook";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "api-webhook";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "user-account";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "user-account";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            extraWebhookHeaders?: unknown;
        };
        assessment: {
            /** @constant */
            type?: "assessment";
            internalId?: string;
            uuid: string;
            isObsolete?: boolean;
            name?: string;
            color?: string;
            context?: string;
            /** @description UNIX Timestamp */
            deadline?: number;
            reviewInterval?: components["schemas"]["period"];
            itemsInScope?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "assessment-all";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "assessment";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "assessment";
                } | {
                    /** @description The model type of the model being linked to */
                    modelType: components["schemas"]["modelType"];
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "all";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            accountableUsers?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "assessment-accountable-user";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "assessment";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "assessment";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "user-account";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "user";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            form?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "assessment-form";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "assessment";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "assessment";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "form";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "form";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            assessmentInfoBlock?: unknown;
        };
        "balancing-test": {
            /** @constant */
            type?: "balancing-test";
            internalId?: string;
            uuid: string;
            color?: string;
            name?: string;
            importanceLevel?: string;
            isOtherLegalGroundPossible?: boolean;
            otherLegalGroundDescription?: string;
            isNecessaryForOrganizationalPurpose?: boolean;
            necessaryForOrganizationalPurposeDescription?: string;
            isNecessaryForThirdParty?: boolean;
            necessaryForThirdPartyDescription?: string;
            isExceptionAllowed?: boolean;
            isRightToObjectAvailable?: boolean;
            isInDataSubjectInterest?: boolean;
            hasAddedValue?: boolean;
            areDataSubjectRightsImpacted?: boolean;
            isHarmExpected?: boolean;
            isActivityExpected?: boolean;
            isDataProcessingExpected?: boolean;
            isIntrusive?: boolean;
            isDataControllerPrejudice?: boolean;
            isThirdPartyPrejudice?: boolean;
            thirdPartyPurposeDescription?: string;
            balancingTestException?: string;
            interactionInterval?: string;
            dataSubjectRelationship?: string;
            wayOfInforming?: string;
            dataObtainMethod?: string;
            processingDecisionPower?: string;
            isObsolete?: boolean;
            processingActivity?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "balancing-test-processing-activity";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "balancing-test";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "balancing-test";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "processing-activity";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "processing-activity";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            otherPossibleLegalGround?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "balancing-test-legal-basis";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "balancing-test";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "balancing-test";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "legal-basis";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "legal-basis";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            tag?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "tag-model";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "tag";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "tag";
                } | {
                    /** @description The model type of the model being linked to */
                    modelType: components["schemas"]["modelType"];
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "model";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            readonly calculatedResultScore?: number;
            conclusion?: unknown;
        };
        category: {
            /** @constant */
            type?: "category";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            isObsolete?: boolean;
            processingActivity?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "processing-activity-category";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "processing-activity";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "processing-activity";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "category";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "category";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
        };
        comment: {
            /** @constant */
            type?: "comment";
            uuid: string;
            isObsolete?: boolean;
        };
        "comment-thread": {
            /** @constant */
            type?: "comment-thread";
            uuid: string;
            isObsolete?: boolean;
        };
        consequence: {
            type?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "consequence-consequence-type";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "consequence";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "consequence";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "consequence-type";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "consequence-type";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            score?: number;
            isObsolete?: boolean;
        };
        "consequence-type": {
            /** @constant */
            type?: "consequence-type";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            isObsolete?: boolean;
        };
        control: {
            /** @constant */
            type?: "control";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            isObsolete?: boolean;
            implementationGuidelines?: string;
            objective?: string;
            frameworkSection?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "framework-section-control";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "control";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "control";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "framework-section";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "framework-section";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            requirement?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "control-control-requirement";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "control";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "control";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "control-requirement";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "control-requirement";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            relevantRisks?: {
                modelType: string;
                uuid: string;
            }[];
            relevantMitigations?: {
                modelType: string;
                uuid: string;
            }[];
            relevantAssets?: {
                modelType: string;
                uuid: string;
            }[];
            relevantEvidences?: {
                modelType: string;
                uuid: string;
            }[];
            relevantTasks?: {
                modelType: string;
                uuid: string;
            }[];
            relevantProcesses?: {
                modelType: string;
                uuid: string;
            }[];
            qualifiedName?: string;
            isApplicable?: unknown;
        };
        "control-requirement": {
            /** @constant */
            type?: "control-requirement";
            internalId?: string;
            uuid: string;
            name?: string;
            isObsolete?: boolean;
            isApplicable?: boolean;
            controlSatisfied?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "control-control-requirement";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "control";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "control";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "control-requirement";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "control-requirement";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            evidence?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "control-requirement-evidence";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "evidence";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "evidence";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "control-requirement";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "control-requirement";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            risk?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "control-requirement-risk";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "risk";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "risk";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "control-requirement";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "control-requirement";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            mitigation?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "control-requirement-mitigation";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "mitigation";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "mitigation";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "control-requirement";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "control-requirement";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
        };
        "control-requirement-applicability-justification": {
            /** @constant */
            type?: "control-requirement-applicability-justification";
            uuid: string;
            name?: string;
            color?: string;
            isObsolete?: boolean;
        };
        "control-requirement-status": {
            /** @constant */
            type?: "control-requirement-status";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            isObsolete?: boolean;
            identifyingColor?: string;
        };
        "cost-currency": {
            /** @constant */
            type?: "cost-currency";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            isoName?: string;
            isObsolete?: boolean;
        };
        "cost-frequency": {
            /** @constant */
            type?: "cost-frequency";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            isObsolete?: boolean;
        };
        country: {
            /** @constant */
            type?: "country";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            isLocatedInsideEea?: boolean;
            isObsolete?: boolean;
        };
        course: {
            /** @constant */
            type?: "course";
            internalId?: string;
            color?: string;
            uuid: string;
            name?: string;
            description?: string;
            duration?: components["schemas"]["period"];
            contentType?: string;
            isObsolete?: boolean;
            category?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "course-course-category";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "course";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "course";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "course-category";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "course-category";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            image?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "course-image";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "course";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "course";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "file";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "image";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
        };
        "course-category": {
            /** @constant */
            type?: "course-category";
            internalId?: string;
            color?: string;
            uuid: string;
            name?: string;
            isObsolete?: boolean;
        };
        "custom-link-definition": {
            /** @constant */
            type?: "custom-link-definition";
            uuid: string;
            name?: string;
            source?: string;
            modelTypes?: unknown;
        };
        "data-access-type": {
            /** @constant */
            type?: "data-access-type";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            isObsolete?: boolean;
        };
        "data-attribute": {
            /** @constant */
            type?: "data-attribute";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            description?: string;
            isSpecialCategory?: boolean;
            isObsolete?: boolean;
            tag?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "tag-model";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "tag";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "tag";
                } | {
                    /** @description The model type of the model being linked to */
                    modelType: components["schemas"]["modelType"];
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "model";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            legislation?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "data-attribute-legislation";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "data-attribute";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "data-attribute";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "legislation";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "legislation";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            linkedClassificationLevel?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "data-classification-data-attribute";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "data-classification";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "data-classification";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "data-attribute";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "data-attribute";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
        };
        "data-classification": {
            /** @constant */
            type?: "data-classification";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            description?: string;
            authorizedPersonnel?: string;
            importantOfAvailability?: string;
            importantOfIntegrity?: string;
            isObsolete?: boolean;
            dataAttributtes?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "data-classification-data-attribute";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "data-classification";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "data-classification";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "data-attribute";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "data-attribute";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            tag?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "tag-model";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "tag";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "tag";
                } | {
                    /** @description The model type of the model being linked to */
                    modelType: components["schemas"]["modelType"];
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "model";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
        };
        "data-disclosure-type": {
            /** @constant */
            type?: "data-disclosure-type";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            isObsolete?: boolean;
        };
        "data-object": {
            /** @constant */
            type?: "data-object";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            description?: string;
            isObsolete?: boolean;
            dataAttribute?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "data-object-data-attribute";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "data-object";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "data-object";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "data-attribute";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "data-attribute";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            tag?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "tag-model";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "tag";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "tag";
                } | {
                    /** @description The model type of the model being linked to */
                    modelType: components["schemas"]["modelType"];
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "model";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
        };
        "data-protection-impact": {
            /** @constant */
            type?: "data-protection-impact";
            internalId?: string;
            color?: string;
            uuid: string;
            name?: string;
            description?: string;
            additionalNotes?: string;
            isObsolete?: boolean;
            dataProtectionImpactStatus?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "data-protection-impact-data-protection-impact-status";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "data-protection-impact";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "data-protection-impact";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "data-protection-impact-status";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "data-protection-impact-status";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            documentation?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "data-protection-impact-documentation";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "data-protection-impact";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "data-protection-impact";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "file";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "file";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            processingActivity?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "data-protection-impact-processing-activity";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "data-protection-impact";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "data-protection-impact";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "processing-activity";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "processing-activity";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            otherItemsInScope?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "data-protection-impact-all";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "data-protection-impact";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "data-protection-impact";
                } | {
                    /** @description The model type of the model being linked to */
                    modelType: components["schemas"]["modelType"];
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "all";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            tag?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "tag-model";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "tag";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "tag";
                } | {
                    /** @description The model type of the model being linked to */
                    modelType: components["schemas"]["modelType"];
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "model";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            risk?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "data-protection-impact-risk";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "data-protection-impact";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "data-protection-impact";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "risk";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "risk";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            "custom-test"?: string;
            "custom-aaa"?: string;
            "custom-testy"?: string;
            "custom-0911"?: string;
        };
        "data-protection-impact-status": {
            /** @constant */
            type?: "data-protection-impact-status";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            identifyingColor?: string;
            isObsolete?: boolean;
        };
        "data-subject-request": {
            /** @constant */
            type?: "data-subject-request";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            description?: string;
            /** @description UNIX Timestamp */
            dateReceived?: number;
            /** @description UNIX Timestamp */
            requestPeriodFrom?: number;
            /** @description UNIX Timestamp */
            requestPeriodTo?: number;
            dataSubjectIdentification?: string;
            isObsolete?: boolean;
            dataSubjectRequestType?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "data-subject-request-data-subject-request-type";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "data-subject-request";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "data-subject-request";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "data-subject-request-type";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "data-subject-request-type";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            dataSubjectRequestSource?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "data-subject-request-data-subject-request-source";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "data-subject-request";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "data-subject-request";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "data-subject-request-source";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "data-subject-request-source";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            dataSubjectRequestStatus?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "data-subject-request-data-subject-request-status";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "data-subject-request";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "data-subject-request";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "data-subject-request-status";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "data-subject-request-status";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            legislation?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "data-subject-request-legislation";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "data-subject-request";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "data-subject-request";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "legislation";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "legislation";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            tag?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "tag-model";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "tag";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "tag";
                } | {
                    /** @description The model type of the model being linked to */
                    modelType: components["schemas"]["modelType"];
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "model";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            upload?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "data-subject-request-file";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "data-subject-request";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "data-subject-request";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "file";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "file";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            dataSubjectType?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "data-subject-request-data-subject-type";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "data-subject-request";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "data-subject-request";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "data-subject-type";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "data-subject-type";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            processingActivity?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "data-subject-request-processing-activity";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "data-subject-request";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "data-subject-request";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "processing-activity";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "processing-activity";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            organizationalUnit?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "organizational-unit-all-models";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "organizational-unit";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "organizational-unit";
                } | {
                    /** @description The model type of the model being linked to */
                    modelType: components["schemas"]["modelType"];
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "model";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            informationManagementSystem?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "data-subject-request-information-management-system";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "data-subject-request";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "data-subject-request";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "information-management-system";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "information-management-system";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            dataAttribute?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "data-subject-request-data-attribute";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "data-subject-request";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "data-subject-request";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "data-attribute";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "data-attribute";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            personnelFunction?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "data-subject-request-personnel-function";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "data-subject-request";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "data-subject-request";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "personnel-function";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "personnel-function";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
        };
        "data-subject-request-source": {
            /** @constant */
            type?: "data-subject-request-source";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            isObsolete?: boolean;
        };
        "data-subject-request-status": {
            /** @constant */
            type?: "data-subject-request-status";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            isObsolete?: boolean;
            identifyingColor?: string;
        };
        "data-subject-request-type": {
            /** @constant */
            type?: "data-subject-request-type";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            isObsolete?: boolean;
        };
        "data-subject-type": {
            /** @constant */
            type?: "data-subject-type";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            description?: string;
            timePeriod?: components["schemas"]["period"];
            isObsolete?: boolean;
            legislation?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "data-subject-type-legislation";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "data-subject-type";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "data-subject-type";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "legislation";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "legislation";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            defaultPlaceOfResidence?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "data-subject-type-country";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "data-subject-type";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "data-subject-type";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "country";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "country";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            tag?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "tag-model";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "tag";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "tag";
                } | {
                    /** @description The model type of the model being linked to */
                    modelType: components["schemas"]["modelType"];
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "model";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
        };
        "data-transfer-format": {
            /** @constant */
            type?: "data-transfer-format";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            isObsolete?: boolean;
        };
        enrollment: {
            /** @constant */
            type?: "enrollment";
            internalId?: string;
            color?: string;
            uuid: string;
            /** @description UNIX Timestamp */
            enrollmentDate?: number;
            /** @description UNIX Timestamp */
            deadline?: number;
            isObsolete?: boolean;
            participant?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "enrollment-participant-user";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "enrollment";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "enrollment";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "user-account";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "user-account";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            accountableUser?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "enrollment-accountable-user";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "enrollment";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "enrollment";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "user-account";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "user-account";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            course?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "enrollment-course";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "enrollment";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "enrollment";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "course";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "course";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            complianceStatus?: string;
            completionStatus?: string;
            result?: unknown;
        };
        "enrolment-automation": {
            /** @constant */
            type?: "enrolment-automation";
            internalId?: string;
            color?: string;
            uuid: string;
            name?: string;
            repetition?: components["schemas"]["period"];
            daysToComplete?: number;
            isObsolete?: boolean;
            course?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "enrolment-automation-course";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "enrolment-automation";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "enrolment-automation";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "course";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "course";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            userGroup?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "enrolment-automation-user-group";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "enrolment-automation";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "enrolment-automation";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "user-group";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "user-group";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
        };
        "entity-role": {
            /** @constant */
            type?: "entity-role";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            isObsolete?: boolean;
        };
        "entity-type": {
            /** @constant */
            type?: "entity-type";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            isObsolete?: boolean;
        };
        "evaluation-type": {
            /** @constant */
            type?: "evaluation-type";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            isObsolete?: boolean;
        };
        event: {
            /** @constant */
            type?: "event";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            /** @description UNIX Timestamp */
            date?: number;
            isObsolete?: boolean;
        };
        evidence: {
            /** @constant */
            type?: "evidence";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            reviewInterval?: components["schemas"]["period"];
            otherClarification?: string;
            isObsolete?: boolean;
            owner?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "user-account-model-owner";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "user-account";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "user-account";
                } | {
                    /** @description The model type of the model being linked to */
                    modelType: components["schemas"]["modelType"];
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "owner-model";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            evidenceFile?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "evidence-file";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "evidence";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "evidence";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "file";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "file";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
        };
        "export-configuration": {
            /** @constant */
            type?: "export-configuration";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            isObsolete?: boolean;
            exportType?: string;
            baseModel?: string;
            formType?: string;
            exportUnauthorizedAccessHandling?: string;
            includeArchived?: boolean;
            exportConfigurationTree?: unknown;
            baseModelCustomLogic?: unknown;
            exportTypeCustomLogic?: unknown;
        };
        file: {
            /** @constant */
            type?: "file";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            originalUri?: string;
            publicAccess?: boolean;
            uploadUri?: string;
            /** @description UNIX Timestamp */
            uploadedOn?: number;
            isObsolete?: boolean;
        };
        form: {
            /** @constant */
            type?: "form";
            internalId?: string;
            color?: string;
            uuid: string;
            name?: string;
            formType?: string;
            isActive?: boolean;
            isDefaultForType?: boolean;
            isObsolete?: boolean;
            guestViewStyle?: string;
            assessments?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "assessment-form";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "assessment";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "assessment";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "form";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "form";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
        };
        "framework-section": {
            /** @constant */
            type?: "framework-section";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            isObsolete?: boolean;
            control?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "framework-section-control";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "control";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "control";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "framework-section";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "framework-section";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
        };
        "global-tenant": {
            /** @constant */
            type?: "global-tenant";
            uuid: string;
            name?: string;
            email?: string;
            vatNumber?: string;
            activeSector?: string;
            activeCountry?: string;
            addressLine1?: string;
            addressLine2?: string;
            city?: string;
            zipCode?: string;
            country?: string;
            logoUri?: string;
            guestLogoUri?: string;
            color?: string;
            guestColor?: string;
            accentColor?: string;
            guestAccentColor?: string;
            isGuestSelfCreateEnabled?: boolean;
            guestSelfCreationDomains?: string;
            purpose?: string;
            activityDescription?: string;
            sharingEmailFooter?: string;
        };
        "impact-level": {
            /** @constant */
            type?: "impact-level";
            internalId?: string;
            uuid: string;
            isObsolete?: boolean;
            name?: string;
            color?: string;
            description?: string;
            lowerBound?: number;
            higherBound?: number;
            level?: number;
            unitType?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "impact-level-currency";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "impact-level";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "impact-level";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "cost-currency";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "unit-type";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
        };
        incident: {
            /** @constant */
            type?: "incident";
            internalId?: string;
            color?: string;
            uuid: string;
            incidentId?: string;
            name?: string;
            reportedBy?: string;
            submittedBy?: string;
            /** @description UNIX Timestamp */
            detectedDate?: number;
            /** @description UNIX Timestamp */
            happenedDate?: number;
            /** @description UNIX Timestamp */
            reportedDate?: number;
            description?: string;
            referenceUrl?: string;
            incidentOrigin?: string;
            stakeholderPrivacyRole?: string;
            isPersonalDataLeaked?: boolean;
            areStandardPersonalDataInvolvedQuestion?: boolean;
            isProfilingOnSocialFinancialDataQuestion?: boolean;
            isProfilingOnHealthSexualDataPossibleQuestion?: boolean;
            canSimpleDataAffectPersonalSafetyQuestion?: boolean;
            areBehaviorRelatedDataInvolvedQuestion?: boolean;
            areBehaviorDataPubliclyAvailableQuestion?: boolean;
            doBehaviorDataProvideInsightQuestion?: boolean;
            isProfilingOnDailyHabitsPossibleQuestion?: boolean;
            isProfilingOnHealthPoliticalDataQuestion?: boolean;
            areFinancialDataInvolvedQuestion?: boolean;
            doesFinancialDataProvideInsightQuestion?: boolean;
            canFinancialDataIndicateFinancialSituationQuestion?: boolean;
            canFinancialInfoLeadToFraudQuestion?: boolean;
            areSpecialCategoriesDataInvolvedQuestion?: boolean;
            areSpecialDataPubliclyAvailableQuestion?: boolean;
            canGeneralDataLeadToAssumptionsQuestion?: boolean;
            canGeneralDataLeadToSensitiveInformationQuestion?: boolean;
            leakedDataPeriod?: string;
            leakedDataConsists?: string;
            specialCharacteristicsOfDataController?: boolean;
            leakedDataAccuracy?: string;
            leakedDataAvailability?: string;
            leakedDataVulnerability?: string;
            natureOfData?: boolean;
            additionalScore?: number;
            lossOfConfidentialityCircumstance?: string;
            lossOfIntegrityCircumstance?: string;
            lossOfAvailabilityCircumstance?: string;
            maliciousIntentCircumstance?: boolean;
            dataSubjectIdentifiability?: string;
            decidedDesScore?: number;
            isObsolete?: boolean;
            agreeWithScore?: boolean;
            summary?: string;
            owner?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "user-account-model-owner";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "user-account";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "user-account";
                } | {
                    /** @description The model type of the model being linked to */
                    modelType: components["schemas"]["modelType"];
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "owner-model";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            incidentCategory?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "incident-incident-category";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "incident";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "incident";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "incident-category";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "incident-category";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            incidentStatus?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "incident-incident-status";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "incident";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "incident";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "incident-status";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "incident-status";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            tag?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "tag-model";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "tag";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "tag";
                } | {
                    /** @description The model type of the model being linked to */
                    modelType: components["schemas"]["modelType"];
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "model";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            upload?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "incident-documentation-file";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "incident";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "incident";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "file";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "file";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            involvedStakeholder?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "incident-involved-stakeholder";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "incident";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "incident";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "stakeholder";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "stakeholder";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            involvedFunction?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "incident-involved-function";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "incident";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "incident";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "personnel-function";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "personnel-function";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            organizationalUnit?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "organizational-unit-all-models";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "organizational-unit";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "organizational-unit";
                } | {
                    /** @description The model type of the model being linked to */
                    modelType: components["schemas"]["modelType"];
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "model";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            incidentDataSubject?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "incident-incident-data-subject";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "incident-data-subject";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "incident-data-subject";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "incident";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "incident";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            informationManagementSystem?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "incident-information-management-system";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "incident";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "incident";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "information-management-system";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "information-management-system";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            dataAttribute?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "incident-information-data-attribute";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "incident";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "incident";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "data-attribute";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "data-attribute";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            additionalIncidentPrameter?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "incident-additional-incident-parameter";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "additional-incident-parameter";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "additional-incident-parameter";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "incident";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "incident";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            allQuestionsAnswered?: boolean;
            calculatedDesScore?: number;
            calculatedScore?: unknown;
            decidedScore?: unknown;
        };
        "incident-category": {
            /** @constant */
            type?: "incident-category";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            isObsolete?: boolean;
            "custom-New field3"?: string;
            "custom-newField1"?: string;
            "custom-New field4"?: string;
            "custom-newField2"?: string;
            "custom-newField3"?: string;
            "custom-New field5"?: string;
            "custom-newField4"?: string;
            "custom-newField5"?: string;
            "custom-New field6"?: string;
            "custom-New field2"?: string;
            "custom-New field1"?: string;
        };
        "incident-data-subject": {
            /** @constant */
            type?: "incident-data-subject";
            internalId?: string;
            color?: string;
            uuid: string;
            amountOfDataSubjectsInvolved?: string;
            isObsolete?: boolean;
            dataSubjectType?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "incident-data-subject-data-subject-type";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "incident-data-subject";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "incident-data-subject";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "data-subject-type";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "data-subject-type";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            country?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "incident-data-subject-country";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "incident-data-subject";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "incident-data-subject";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "country";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "country";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
        };
        "incident-status": {
            /** @constant */
            type?: "incident-status";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            isObsolete?: boolean;
        };
        "information-management-system": {
            /** @constant */
            type?: "information-management-system";
            internalId?: string;
            color?: string;
            uuid: string;
            name?: string;
            description?: string;
            hasAI?: boolean;
            externalReferenceUrl?: string;
            isLocationInternal?: boolean;
            locationDetails?: string;
            storageLocation?: string;
            /** @description UNIX Timestamp */
            purchaseDate?: number;
            costAmount?: number;
            isObsolete?: boolean;
            status?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "information-management-system-status";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "information-management-system";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "information-management-system";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "information-management-system-status";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "information-management-system-status";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            systemType?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "information-management-system-type";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "information-management-system";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "information-management-system";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "information-management-system-type";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "information-management-system-type";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            owner?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "information-management-system-user-account-owner";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "information-management-system";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "information-management-system";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "user-account";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "user-account";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            tag?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "tag-model";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "tag";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "tag";
                } | {
                    /** @description The model type of the model being linked to */
                    modelType: components["schemas"]["modelType"];
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "model";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            organizationalUnit?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "organizational-unit-all-models";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "organizational-unit";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "organizational-unit";
                } | {
                    /** @description The model type of the model being linked to */
                    modelType: components["schemas"]["modelType"];
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "model";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            country?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "information-management-system-country";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "information-management-system";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "information-management-system";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "country";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "country";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            costFrequency?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "information-management-system-cost-frequency";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "information-management-system";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "information-management-system";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "cost-frequency";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "cost-frequency";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            costCurrency?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "information-management-system-cost-currency";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "information-management-system";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "information-management-system";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "cost-currency";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "cost-currency";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            supplier?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "information-management-system-stakeholder-supplier";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "information-management-system";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "information-management-system";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "stakeholder";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "stakeholder";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            manufacturer?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "information-management-system-stakeholder-manufacturer";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "information-management-system";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "information-management-system";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "stakeholder";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "stakeholder";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            integrator?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "information-management-system-stakeholder-integrator";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "information-management-system";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "information-management-system";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "stakeholder";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "stakeholder";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            dataClassification?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "information-management-system-data-classification";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "information-management-system";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "information-management-system";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "data-classification";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "data-classification";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            relatedAssessments?: unknown;
        };
        "information-management-system-status": {
            /** @constant */
            type?: "information-management-system-status";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            isObsolete?: boolean;
            identifyingColor?: string;
        };
        "information-management-system-type": {
            /** @constant */
            type?: "information-management-system-type";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            isObsolete?: boolean;
        };
        justification: {
            /** @constant */
            type?: "justification";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            description?: string;
            isObsolete?: boolean;
        };
        "legal-basis": {
            /** @constant */
            type?: "legal-basis";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            impliesLegitimateInterest?: boolean;
            impliesLegalObligation?: boolean;
            isObsolete?: boolean;
        };
        "legal-ground": {
            /** @constant */
            type?: "legal-ground";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            isObsolete?: boolean;
            processingActivity?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "processing-activity-legal-ground";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "processing-activity";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "processing-activity";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "legal-ground";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "legal-ground";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
        };
        "legal-obligation": {
            /** @constant */
            type?: "legal-obligation";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            specificArticle?: string;
            reviewInterval?: components["schemas"]["period"];
            isObsolete?: boolean;
            processingActivity?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "processing-activity-legal-obligation";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "processing-activity";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "processing-activity";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "legal-obligation";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "legal-obligation";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            legislation?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "legal-obligation-legislation";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "legal-obligation";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "legal-obligation";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "legislation";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "legislation";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            tag?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "tag-model";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "tag";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "tag";
                } | {
                    /** @description The model type of the model being linked to */
                    modelType: components["schemas"]["modelType"];
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "model";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
        };
        "legal-template": {
            /** @constant */
            type?: "legal-template";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            purposeDescription?: string;
            numberOfVersions?: number;
            isObsolete?: boolean;
            processingActivity?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "processing-activity-legal-template";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "processing-activity";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "processing-activity";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "legal-template";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "legal-template";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            legalTemplateVersion?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "legal-template-legal-template-version";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "legal-template-version";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "legal-template-version";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "legal-template";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "legal-template";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            tag?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "tag-model";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "tag";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "tag";
                } | {
                    /** @description The model type of the model being linked to */
                    modelType: components["schemas"]["modelType"];
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "model";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
        };
        "legal-template-type": {
            /** @constant */
            type?: "legal-template-type";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            isObsolete?: boolean;
            processingActivity?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "processing-activity-legal-template-type";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "processing-activity";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "processing-activity";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "legal-template-type";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "legal-template-type";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
        };
        "legal-template-version": {
            /** @constant */
            type?: "legal-template-version";
            internalId?: string;
            uuid: string;
            color?: string;
            description?: string;
            changeNotes?: string;
            externalReference?: string;
            isObsolete?: boolean;
            versionFile?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "legal-template-version-file";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "legal-template-version";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "legal-template-version";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "file";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "file";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            legalTemplate?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "legal-template-legal-template-version";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "legal-template-version";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "legal-template-version";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "legal-template";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "legal-template";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
        };
        legislation: {
            /** @constant */
            type?: "legislation";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            /** @description UNIX Timestamp */
            latestConsolidatedVersion?: number;
            /** @description UNIX Timestamp */
            dateOfEnforcement?: number;
            involvedAuthority?: string;
            authenticSourceReference?: string;
            relevantLinks?: string;
            externalFileUrl?: string;
            isObsolete?: boolean;
            processingActivity?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "processing-activity-legislation";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "processing-activity";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "processing-activity";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "legislation";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "legislation";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
        };
        milestone: {
            /** @constant */
            type?: "milestone";
            internalId?: string;
            uuid: string;
            name?: string;
            /** @description UNIX Timestamp */
            startDate?: number;
            /** @description UNIX Timestamp */
            endDate?: number;
            description?: string;
            color?: string;
            keepTaskInSync?: boolean;
            isObsolete?: boolean;
            accountable?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "milestone-user-account-accountable";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "milestone";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "milestone";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "user-account";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "accountable";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            keepTaskInSyncTrue?: unknown;
            moveEndDate?: unknown;
            keepTaskInSyncFalse?: unknown;
        };
        mitigation: {
            /** @constant */
            type?: "mitigation";
            internalId?: string;
            uuid: string;
            color?: string;
            name?: string;
            /** @description UNIX Timestamp */
            deadline?: number;
            implementationDetails?: string;
            isObsolete?: boolean;
            controlRequirement?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "control-requirement-mitigation";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "mitigation";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "mitigation";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "control-requirement";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "control-requirement";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            policy?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "mitigation-policy";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "mitigation";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "mitigation";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "policy";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "policy";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            advice?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "mitigation-advice";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "mitigation";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "mitigation";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "advice";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "advice";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            mitigationStatus?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "mitigation-mitigation-status";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "mitigation";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "mitigation";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "mitigation-status";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "mitigation-status";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            risk?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "mitigation-risk";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "mitigation";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "mitigation";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "risk";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "risk";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            projects?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "project-all-models";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "project";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "project";
                } | {
                    /** @description The model type of the model being linked to */
                    modelType: components["schemas"]["modelType"];
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "model";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            processingActivity?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "mitigation-processing-activity";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "mitigation";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "mitigation";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "processing-activity";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "processing-activity";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            task?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "task-all";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "task";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "task";
                } | {
                    /** @description The model type of the model being linked to */
                    modelType: components["schemas"]["modelType"];
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "all";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            process?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "mitigation-process";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "process";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "process";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "mitigation";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "mitigation";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            impactedAssets?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "mitigation-security-asset";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "mitigation";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "mitigation";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "security-asset";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "security-asset";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            evidence?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "mitigation-evidence";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "evidence";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "evidence";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "mitigation";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "mitigation";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
        };
        "mitigation-status": {
            /** @constant */
            type?: "mitigation-status";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            isFinal?: boolean;
            isObsolete?: boolean;
        };
        notification: {
            type?: unknown;
            uuid: string;
            color?: string;
            isObsolete?: boolean;
            ownerUser?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "notification-user-account";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "notification";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "notification";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "user-account";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "user-account";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            status?: unknown;
            content?: unknown;
        };
        "organizational-unit": {
            /** @constant */
            type?: "organizational-unit";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            description?: string;
            addressLine1?: string;
            addressLine2?: string;
            isObsolete?: boolean;
            country?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "organizational-unit-country";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "organizational-unit";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "organizational-unit";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "country";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "country";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            parentOrganizationalUnit?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "organizational-unit-organizational-unit";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "organizational-unit";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "parent-organizational-unit";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "organizational-unit";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "underlying-organizational-unit";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            underlyingOrganizationalUnit?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "organizational-unit-organizational-unit";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "organizational-unit";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "parent-organizational-unit";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "organizational-unit";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "underlying-organizational-unit";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            owner?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "organizational-unit-owner";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "organizational-unit";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "organizational-unit";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "user-account";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "owner";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            members?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "organizational-unit-members";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "organizational-unit";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "organizational-unit";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "user-account";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "members";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
        };
        permission: {
            /** @constant */
            type?: "permission";
            internalId?: string;
            color?: string;
            uuid: string;
            models?: string[];
            depth?: string;
            organizationalUnit?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "permission-organizational-unit";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "permission";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "permission";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "organizational-unit";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "organizational-unit";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
        };
        "personnel-function": {
            /** @constant */
            type?: "personnel-function";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            isObsolete?: boolean;
            processingActivity?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "processing-activity-personnel-function";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "processing-activity";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "processing-activity";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "personnel-function";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "personnel-function";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
        };
        "phishing-attempt": {
            /** @constant */
            type?: "phishing-attempt";
            internalId?: string;
            isObsolete?: boolean;
            color?: string;
            uuid: string;
            /** @description UNIX Timestamp */
            scheduledSend?: number;
            /** @description UNIX Timestamp */
            actualSend?: number;
            /** @description UNIX Timestamp */
            lastOpenedOn?: number;
            /** @description UNIX Timestamp */
            linkLastClickedOn?: number;
            /** @description UNIX Timestamp */
            lastLandingPageSubmittedOn?: number;
            /** @description UNIX Timestamp */
            passesOn?: number;
            /** @description UNIX Timestamp */
            expiresOn?: number;
            /** @description UNIX Timestamp */
            deletedOn?: number;
            /** @description UNIX Timestamp */
            failedOn?: number;
            failedError?: string;
            emailFrom?: string;
            emailSubject?: string;
            phishingCampaign?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "phishing-attempt-phishing-campaign";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "phishing-attempt";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "phishing-attempt";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "phishing-campaign";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "phishing-campaign";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            phishingTarget?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "phishing-attempt-user-account";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "phishing-attempt";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "phishing-attempt";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "user-account";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "user-account";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            status?: string;
            phishingAttemptStatus?: unknown;
        };
        "phishing-campaign": {
            /** @constant */
            type?: "phishing-campaign";
            internalId?: string;
            color?: string;
            isObsolete?: boolean;
            uuid: string;
            name?: string;
            averageFrequency?: string;
            avoidSendingOnWeekends?: boolean;
            archiveNonLatestAfterWeeks?: number;
            deleteNonLatestAfterWeeks?: number;
            enabled?: boolean;
            landingPage?: string;
            trainingToBeCompletedInDays?: number;
            companyNameIncludedInAIInstructions?: boolean;
            companyLogoIncludedInAIInstructions?: boolean;
            companyVATNumberIncludedInAIInstructions?: boolean;
            companyActiveInCountryIncludedInAIInstructions?: boolean;
            companyActiveInSectorIncludedInAIInstructions?: boolean;
            companyIndustryIncludedInAIInstructions?: boolean;
            allowUseInSameOrganizationalUnit?: boolean;
            aiInstructions?: string;
            userGroups?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "phishing-campaign-user-group";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "phishing-campaign";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "phishing-campaign";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "user-group";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "user-group";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            trainingOnFailure?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "phishing-campaign-course";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "phishing-campaign";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "phishing-campaign";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "course";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "course";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            responsibleForTrainingOnFailure?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "phishing-campaign-user-account";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "phishing-campaign";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "phishing-campaign";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "user-account";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "user-account";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            numberOfUsersTargeted?: number;
            numberOfUsersPending?: number;
            latestOpenRate?: number;
            latestClickRate?: number;
            latestPassRate?: number;
            dataUsedInfoBlock?: unknown;
            phishingDomain?: unknown;
            companyDataUsedInfoBlock?: unknown;
            userPersonalizationData?: unknown;
        };
        policy: {
            /** @constant */
            type?: "policy";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            description?: string;
            reviewInterval?: components["schemas"]["period"];
            isObsolete?: boolean;
            policyType?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "policy-policy-type";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "policy";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "policy";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "policy-type";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "policy-type";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            initialCreator?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "policy-user-account-initial-creator";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "policy";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "policy";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "user-account";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "user-account";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            organizationalUnit?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "organizational-unit-all-models";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "organizational-unit";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "organizational-unit";
                } | {
                    /** @description The model type of the model being linked to */
                    modelType: components["schemas"]["modelType"];
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "model";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            informationManagementSystem?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "information-management-system-policy";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "information-management-system";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "information-management-system";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "policy";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "policy";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            personnelFunction?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "personnel-function-policy";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "personnel-function";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "personnel-function";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "policy";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "policy";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            tag?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "tag-model";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "tag";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "tag";
                } | {
                    /** @description The model type of the model being linked to */
                    modelType: components["schemas"]["modelType"];
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "model";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            policyVersions?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "policy-policy-version";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "policy";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "policy";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "policy-version";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "policy-version";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            lastPolicyVersionFile?: unknown;
        };
        "policy-type": {
            /** @constant */
            type?: "policy-type";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
        };
        "policy-version": {
            /** @constant */
            type?: "policy-version";
            internalId?: string;
            color?: string;
            uuid: string;
            description?: string;
            changeNotes?: string;
            storageLocation?: string;
            externalReference?: string;
            isObsolete?: boolean;
            versionFile?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "policy-version-file";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "policy-version";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "policy-version";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "file";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "file";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            policy?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "policy-policy-version";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "policy";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "policy";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "policy-version";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "policy-version";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
        };
        "probability-level": {
            /** @constant */
            type?: "probability-level";
            internalId?: string;
            uuid: string;
            isObsolete?: boolean;
            name?: string;
            color?: string;
            lowerBound?: number;
            higherBound?: number;
            level?: number;
            unitType?: string;
            timePeriod?: components["schemas"]["period"];
        };
        process: {
            /** @constant */
            type?: "process";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            isObsolete?: boolean;
            purpose?: string;
            scope?: string;
            procedure?: string;
            otherDocumentation?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "process-documentation-file";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "process";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "process";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "file";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "file";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            processingActivity?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "process-processing-activity";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "process";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "process";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "processing-activity";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "processing-activity";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            organizationalUnit?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "organizational-unit-all-models";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "organizational-unit";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "organizational-unit";
                } | {
                    /** @description The model type of the model being linked to */
                    modelType: components["schemas"]["modelType"];
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "model";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            imformationManagementSystem?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "process-information-management-system";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "information-management-system";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "information-management-system";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "process";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "process";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            responsibleUser?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "process-responsible-user";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "user-account";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "responsible-user";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "process";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "process";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            accountableUser?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "process-accountable-user";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "user-account";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "accountable-user";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "process";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "process";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
        };
        "processed-data-lifecycle": {
            /** @constant */
            type?: "processed-data-lifecycle";
            internalId?: string;
            uuid: string;
            color?: string;
            isObsolete?: boolean;
            identifier?: string;
            dataSubjectProcessingRate?: components["schemas"]["period-with-rate"];
            capturedDirectly?: boolean;
            hasExternalSource?: boolean;
            sourceDescription?: string;
            locationDetails?: string;
            retentionPeriod?: components["schemas"]["period"];
            retentionPeriodTrigger?: string;
            retentionPeriodDescription?: string;
            retentionPeriodExceptions?: string;
            retentionPeriodActionsWhenEnded?: string;
            retentionPeriodSource?: string;
            retentionPeriodArticles?: string;
            disclosureDetails?: string;
            outsideEea?: boolean;
            disclosureReference?: string;
            legalGround?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "processed-data-lifecycle-legal-ground";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "processed-data-lifecycle";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "processed-data-lifecycle";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "legal-ground";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "legal-ground";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            dataSubjectType?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "processed-data-lifecycle-data-subject-type";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "processed-data-lifecycle";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "processed-data-lifecycle";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "data-subject-type";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "data-subject-type";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            placeOfResidence?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "processed-data-lifecycle-country-place-of-residence";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "processed-data-lifecycle";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "processed-data-lifecycle";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "country";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "country";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            objectsLink?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "processed-data-lifecycle-data-object";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "processed-data-lifecycle";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "processed-data-lifecycle";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "data-object";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "data-object";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            attributes?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "processed-data-lifecycle-data-attribute";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "processed-data-lifecycle";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "processed-data-lifecycle";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "data-attribute";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "data-attribute";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            internalDataSources?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "processed-data-lifecycle-organizational-unit-internal";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "processed-data-lifecycle";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "processed-data-lifecycle";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "organizational-unit";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "organizational-unit";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            informationManagementSystem?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "processed-data-lifecycle-information-management-system";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "processed-data-lifecycle";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "processed-data-lifecycle";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "information-management-system";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "information-management-system";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            legislations?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "processed-data-lifecycle-legislation";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "processed-data-lifecycle";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "processed-data-lifecycle";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "legislation";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "legislation";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            externalDataSources?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "processed-data-lifecycle-stakeholder-external";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "processed-data-lifecycle";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "processed-data-lifecycle";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "stakeholder";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "stakeholder";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            organizationalUnit?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "processed-data-lifecycle-organizational-unit-disclosure";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "processed-data-lifecycle";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "processed-data-lifecycle";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "organizational-unit";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "organizational-unit";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            stakeholder?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "processed-data-lifecycle-stakeholder-disclosure";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "processed-data-lifecycle";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "processed-data-lifecycle";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "stakeholder";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "stakeholder";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            disclosureType?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "processed-data-lifecycle-disclosure-type";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "processed-data-lifecycle";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "processed-data-lifecycle";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "data-disclosure-type";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "disclosure-type";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            disclosureAgreements?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "processed-data-lifecycle-agreement-disclosure";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "processed-data-lifecycle";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "processed-data-lifecycle";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "agreement";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "agreement";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            disclosureCountries?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "processed-data-lifecycle-country-disclosure";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "processed-data-lifecycle";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "processed-data-lifecycle";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "country";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "country";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            transferMechanism?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "processed-data-lifecycle-transfer-mechanism";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "processed-data-lifecycle";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "processed-data-lifecycle";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "transfer-mechanism";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "transfer-mechanism";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            processingActivity?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "processed-data-lifecycle-processing-activity";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "processed-data-lifecycle";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "processed-data-lifecycle";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "processing-activity";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "processing-activity";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            isFilersKeepers?: unknown;
            objects?: unknown;
            specialCategoryAttributes?: unknown;
        };
        "processing-activity": {
            /** @constant */
            type?: "processing-activity";
            internalId?: string;
            name?: string;
            purpose?: string;
            uuid: string;
            color?: string;
            /** @description UNIX Timestamp */
            startDate?: number;
            startDateKnown?: boolean;
            /** @description UNIX Timestamp */
            endDate?: number;
            endDateKnown?: boolean;
            jointControllersUsed?: boolean;
            gdprRole?: string;
            reviewInterval?: components["schemas"]["period"];
            description?: string;
            notes?: string;
            isObsolete?: boolean;
            additionalLegalBasis?: string;
            isLawfulFairAndTransparent?: boolean;
            isPurposeLimited?: boolean;
            isSpecific?: boolean;
            isMeasurable?: boolean;
            isAcceptable?: boolean;
            isRealistic?: boolean;
            isTimeBound?: boolean;
            isAdequateRelevantAndLimited?: boolean;
            isVerifiedAccurate?: boolean;
            isRegularlyUpdated?: boolean;
            isDataFlowQualityControlled?: boolean;
            isRetentionDefined?: boolean;
            isSecure?: boolean;
            isComplianceDemonstrated?: boolean;
            isIncludingEvaluationOrScoring?: boolean;
            isIncludingAutomatedDecisionMaking?: boolean;
            isIncludingSystematicMonitoring?: boolean;
            isSensitiveData?: boolean;
            isLargeScaleDataProcessing?: boolean;
            isIncludingMatchingDataSets?: boolean;
            isVulnerableDataSubjects?: boolean;
            isIncludingInnovativeUse?: boolean;
            isNotPossibleToRelyOnService?: boolean;
            organizationalUnit?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "organizational-unit-all-models";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "organizational-unit";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "organizational-unit";
                } | {
                    /** @description The model type of the model being linked to */
                    modelType: components["schemas"]["modelType"];
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "model";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            processingActivityOwner?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "user-account-model-owner";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "user-account";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "user-account";
                } | {
                    /** @description The model type of the model being linked to */
                    modelType: components["schemas"]["modelType"];
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "owner-model";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            relatedAssessments?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "assessment-all";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "assessment";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "assessment";
                } | {
                    /** @description The model type of the model being linked to */
                    modelType: components["schemas"]["modelType"];
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "all";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            legalBasisForProcessing?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "processing-activity-legal-basis";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "processing-activity";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "processing-activity";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "legal-basis";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "legal-basis";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            processingActivityInvolvedUsers?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "processing-activity-user-account-involved-users";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "processing-activity";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "processing-activity";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "user-account";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "user-account";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            controllers?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "processingActivity-stakeholder-controllers";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "processing-activity";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "controlled-activity";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "stakeholder";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "activity-controller";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            category?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "processing-activity-category";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "processing-activity";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "processing-activity";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "category";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "category";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            tag?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "tag-model";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "tag";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "tag";
                } | {
                    /** @description The model type of the model being linked to */
                    modelType: components["schemas"]["modelType"];
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "model";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            processedDataLifecycle?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "processed-data-lifecycle-processing-activity";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "processed-data-lifecycle";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "processed-data-lifecycle";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "processing-activity";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "processing-activity";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            legalTemplate?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "processing-activity-legal-template";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "processing-activity";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "processing-activity";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "legal-template";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "legal-template";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            legalTemplateType?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "processing-activity-legal-template-type";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "processing-activity";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "processing-activity";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "legal-template-type";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "legal-template-type";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            personnelFunction?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "processing-activity-personnel-function";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "processing-activity";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "processing-activity";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "personnel-function";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "personnel-function";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            dataSubjectPolicies?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "processing-activity-policy";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "processing-activity";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "processing-activity";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "policy";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "policy";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            mitigations?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "mitigation-processing-activity";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "mitigation";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "mitigation";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "processing-activity";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "processing-activity";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            parentProcess?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "process-processing-activity";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "process";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "process";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "processing-activity";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "processing-activity";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            "custom-"?: string;
            "custom-Custom field 4"?: string;
            "custom-Custom field Label 1"?: string;
            "custom-Custom field Label 2"?: string;
            "custom-Custom field Label 3"?: string;
            "custom-test"?: string;
            "custom-Measure 1"?: string;
            "custom-jjj"?: string;
            legalBasisJustification?: unknown;
            dpiaRecommendation?: unknown;
            specialCategoryAttributes?: unknown;
        };
        project: {
            /** @constant */
            type?: "project";
            internalId?: string;
            color?: string;
            uuid: string;
            name?: string;
            internalReference?: string;
            description?: string;
            externalReference?: string;
            purposeDescription?: string;
            /** @description UNIX Timestamp */
            startDate?: number;
            /** @description UNIX Timestamp */
            endDate?: number;
            isObsolete?: boolean;
            owner?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "user-account-model-owner";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "user-account";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "user-account";
                } | {
                    /** @description The model type of the model being linked to */
                    modelType: components["schemas"]["modelType"];
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "owner-model";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            upload?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "project-file-upload";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "project";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "project";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "file";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "file";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            evaluationTypes?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "project-evaluation-type";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "project";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "project";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "evaluation-type";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "evaluation-type";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            organizationalUnit?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "organizational-unit-all-models";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "organizational-unit";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "organizational-unit";
                } | {
                    /** @description The model type of the model being linked to */
                    modelType: components["schemas"]["modelType"];
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "model";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            tag?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "tag-model";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "tag";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "tag";
                } | {
                    /** @description The model type of the model being linked to */
                    modelType: components["schemas"]["modelType"];
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "model";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            internalOwner?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "project-project-status";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "project";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "project";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "project-status";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "project-status";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            linkedItems?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "project-all-models";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "project";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "project";
                } | {
                    /** @description The model type of the model being linked to */
                    modelType: components["schemas"]["modelType"];
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "model";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            "custom-test2"?: string;
        };
        "project-status": {
            /** @constant */
            type?: "project-status";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            isObsolete?: boolean;
            identifyingColor?: string;
        };
        "reporting-widget": {
            /** @constant */
            type?: "reporting-widget";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            isObsolete?: boolean;
            dashboard?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "widget-dashboard-reporting-widget";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "widget-dashboard";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "widget-dashboard";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "reporting-widget";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "reporting-widget";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
        };
        risk: {
            /** @constant */
            type?: "risk";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            identifier?: string;
            description?: string;
            riskSource?: string;
            isObsolete?: boolean;
            riskHandlingDescription?: string;
            riskType?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "risk-risk-type";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "risk";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "risk";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "risk-type";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "risk-type";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            organizationalUnit?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "organizational-unit-all-models";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "organizational-unit";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "organizational-unit";
                } | {
                    /** @description The model type of the model being linked to */
                    modelType: components["schemas"]["modelType"];
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "model";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            owner?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "user-account-model-owner";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "user-account";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "user-account";
                } | {
                    /** @description The model type of the model being linked to */
                    modelType: components["schemas"]["modelType"];
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "owner-model";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            probability?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "risk-probability-level";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "risk";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "risk";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "probability-level";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "probability-level";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            impact?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "risk-impact-level";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "risk";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "risk";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "impact-level";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "impact-level";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            riskThreat?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "risk-risk-threat";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "risk";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "risk";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "risk-threat";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "risk-threat";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            riskHandlingMethod?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "risk-risk-handling-method";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "risk";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "risk";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "risk-handling-method";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "risk-handling-method";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            mitigation?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "mitigation-risk";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "mitigation";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "mitigation";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "risk";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "risk";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            residualImpactLevel?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "risk-residual-impact-level";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "risk";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "risk";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "impact-level";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "residual-impact-level";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            residualProbabilityLevel?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "risk-residual-probability-level";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "risk";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "risk";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "probability-level";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "residual-probability-level";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            consequences?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "risk-consequence";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "risk";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "risk";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "consequence";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "consequence";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            impactedAssets?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "risk-security-asset";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "risk";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "risk";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "security-asset";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "security-asset";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            evidence?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "risk-evidence";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "evidence";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "evidence";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "risk";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "risk";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            coloredRiskLevel?: unknown;
            coloredResidualRiskLevel?: unknown;
            suggestedImpact?: unknown;
        };
        "risk-category": {
            /** @constant */
            type?: "risk-category";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            isObsolete?: boolean;
        };
        "risk-handling-method": {
            /** @constant */
            type?: "risk-handling-method";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            isObsolete?: boolean;
        };
        "risk-level": {
            /** @constant */
            type?: "risk-level";
            internalId?: string;
            color?: string;
            name?: string;
            lowerBound?: number;
        };
        "risk-threat": {
            /** @constant */
            type?: "risk-threat";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            threatType?: string;
            description?: string;
            isObsolete?: boolean;
        };
        "risk-type": {
            /** @constant */
            type?: "risk-type";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            description?: string;
            isObsolete?: boolean;
            risk?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "risk-risk-type";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "risk";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "risk";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "risk-type";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "risk-type";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            riskCategory?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "risk-type-risk-category";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "risk-type";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "risk-type";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "risk-category";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "risk-category";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
        };
        sector: {
            /** @constant */
            type?: "sector";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            isObsolete?: boolean;
        };
        "security-asset": {
            /** @constant */
            type?: "security-asset";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            isObsolete?: boolean;
            description?: string;
            owner?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "user-account-model-owner";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "user-account";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "user-account";
                } | {
                    /** @description The model type of the model being linked to */
                    modelType: components["schemas"]["modelType"];
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "owner-model";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            approvedClassificationLevel?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "security-asset-data-classification";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "security-asset";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "security-asset";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "data-classification";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "data-classification";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            linkedItems?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "security-asset-linked-item";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "security-asset";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "security-asset";
                } | {
                    /** @description The model type of the model being linked to */
                    modelType: components["schemas"]["modelType"];
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "linked-item";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
        };
        stakeholder: {
            /** @constant */
            type?: "stakeholder";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            addressLine1?: string;
            addressLine2?: string;
            contactInfo?: string;
            generalEmail?: string;
            legalForm?: string;
            registrationNumber?: string;
            vatNumber?: string;
            description?: string;
            isDpoAvailable?: boolean;
            dpoDescription?: string;
            isObsolete?: boolean;
            controlledActivities?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "processingActivity-stakeholder-controllers";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "processing-activity";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "controlled-activity";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "stakeholder";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "activity-controller";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            relatedAssessments?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "assessment-all";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "assessment";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "assessment";
                } | {
                    /** @description The model type of the model being linked to */
                    modelType: components["schemas"]["modelType"];
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "all";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            stakeholderContacts?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "stakeholder-stakeholderContact-contacts";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "stakeholder";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "stakeholder";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "stakeholder-contact";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "contact";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            stakeholderAgreements?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "agreement-stakeholder";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "agreement";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "agreement";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "stakeholder";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "stakeholder";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            country?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "stakeholder-country";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "stakeholder";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "stakeholder";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "country";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "country";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            tag?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "tag-model";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "tag";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "tag";
                } | {
                    /** @description The model type of the model being linked to */
                    modelType: components["schemas"]["modelType"];
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "model";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
        };
        "stakeholder-contact": {
            /** @constant */
            type?: "stakeholder-contact";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            role?: string;
            phoneNumber?: string;
            email?: string;
            isObsolete?: boolean;
            stakeholder?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "stakeholder-stakeholderContact-contacts";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "stakeholder";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "stakeholder";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "stakeholder-contact";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "contact";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
        };
        suggestion: {
            /** @constant */
            type?: "suggestion";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            severity?: string;
            suggestionRule?: string;
            isObsolete?: boolean;
            taskStatus?: string;
            taskStatusVisualization?: unknown;
            severityVisualization?: unknown;
            linkedItemVisualization?: unknown;
            detailsVisualization?: unknown;
        };
        tag: {
            /** @constant */
            type?: "tag";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            isObsolete?: boolean;
        };
        task: {
            /** @constant */
            type?: "task";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            description?: string;
            /** @description UNIX Timestamp */
            deadline?: number;
            reminder?: string[];
            isObsolete?: boolean;
            organizationalUnit?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "organizational-unit-all-models";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "organizational-unit";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "organizational-unit";
                } | {
                    /** @description The model type of the model being linked to */
                    modelType: components["schemas"]["modelType"];
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "model";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            owner?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "task-owner";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "user-account";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "owner";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "task";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "task";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            appointedUser?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "task-appoint-user";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "user-account";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "appointed-user";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "task";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "task";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            taskPriority?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "task-task-priority";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "task-priority";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "task-priority";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "task";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "task";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            relatedTo?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "task-all";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "task";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "task";
                } | {
                    /** @description The model type of the model being linked to */
                    modelType: components["schemas"]["modelType"];
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "all";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            taskStatus?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "task-task-status";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "task-status";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "task-status";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "task";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "task";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            milestone?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "task-milestone";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "milestone";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "milestone";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "task";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "task";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            customDeadline?: unknown;
        };
        "task-priority": {
            /** @constant */
            type?: "task-priority";
            internalId?: string;
            uuid: string;
            name?: string;
            isObsolete?: boolean;
            color?: string;
        };
        "task-status": {
            /** @constant */
            type?: "task-status";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            isObsolete?: boolean;
        };
        "transfer-impact-assessment": {
            /** @constant */
            type?: "transfer-impact-assessment";
            internalId?: string;
            uuid: string;
            color?: string;
            name?: string;
            reviewInterval?: components["schemas"]["period"];
            isThirdCountryTransfers?: boolean;
            isUnderLegalObligationToNotAnswerQuestions?: boolean;
            isAccessedByPublicAuthorities?: boolean;
            isJustifiableInterference?: boolean;
            isInterferenceByLaw?: boolean;
            isLawClearRules?: boolean;
            isRightGrantedToDataSubjects?: boolean;
            isProportionateToTheSeverity?: boolean;
            isLegislationIdentifyingLimits?: boolean;
            isProvidedByIndependentBody?: boolean;
            isEffectiveRemedy?: boolean;
            isUnder50USC?: boolean;
            isDefinedIn153Section?: boolean;
            isDefinedIn2510Section?: boolean;
            isDefinedIn2711Section?: boolean;
            isWireOrElectronicCommunications?: boolean;
            isAnOfficerEmployeeOrAgent?: boolean;
            isUnderEO12333?: boolean;
            isUnderArticle44?: boolean;
            isObsolete?: boolean;
            processingActivity?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "transfer-impact-assessment-processing-activity";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "transfer-impact-assessment";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "transfer-impact-assessment";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "processing-activity";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "processing-activity";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            informationManagementSystem?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "transfer-impact-assessment-information-management-system";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "transfer-impact-assessment";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "transfer-impact-assessment";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "information-management-system";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "information-management-system";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            locationOfTheImporter?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "transfer-impact-assessment-country";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "transfer-impact-assessment";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "transfer-impact-assessment";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "country";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "country";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            tag?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "tag-model";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "tag";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "tag";
                } | {
                    /** @description The model type of the model being linked to */
                    modelType: components["schemas"]["modelType"];
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "model";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            involvedEntities?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "transfer-impact-assessment-entity-type";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "transfer-impact-assessment";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "transfer-impact-assessment";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "entity-type";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "entity-type";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            roleInProcessingActivity?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "transfer-impact-assessment-entity-role";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "transfer-impact-assessment";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "transfer-impact-assessment";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "entity-role";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "entity-role";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            storedWithinEEA?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "transfer-impact-assessment-data-access-type";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "transfer-impact-assessment";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "transfer-impact-assessment";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "data-access-type";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "data-access-type";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            personalDataTransferredObjectsLink?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "transfer-impact-assessment-data-object";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "transfer-impact-assessment";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "transfer-impact-assessment";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "data-object";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "data-object";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            personalDataTransferredAttributes?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "transfer-impact-assessment-data-attribute";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "transfer-impact-assessment";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "transfer-impact-assessment";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "data-attribute";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "data-attribute";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            relatedSector?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "transfer-impact-assessment-sector";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "transfer-impact-assessment";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "transfer-impact-assessment";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "sector";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "sector";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            formatOfTransferredData?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "transfer-impact-assessment-data-transfer-format";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "transfer-impact-assessment";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "transfer-impact-assessment";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "data-transfer-format";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "data-transfer-format";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            riskIdentification?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "transfer-impact-assessment-risk";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "transfer-impact-assessment";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "transfer-impact-assessment";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "risk";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "risk";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            personalDataTransferredObjects?: unknown;
        };
        "transfer-mechanism": {
            /** @constant */
            type?: "transfer-mechanism";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            isObsolete?: boolean;
        };
        "user-account": {
            /** @constant */
            type?: "user-account";
            color?: string;
            internalId?: string;
            uuid: string;
            email?: string;
            firstName?: string;
            lastName?: string;
            phone?: string;
            isEnabled?: boolean;
            isEnforceTotp?: boolean;
            isObsolete?: boolean;
            /** @description UNIX Timestamp */
            lastIdentify?: number;
            userType?: string;
            /** @description UNIX Timestamp */
            lastAdSyncChange?: number;
            creationSource?: string;
            language?: string;
            permission?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "permission-user-account";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "permission";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "permission";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "user-account";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "user-account";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            personnelFunction?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "user-account-personnel-function";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "user-account";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "user-account";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "personnel-function";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "personnel-function";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            adSyncConfiguration?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "user-account-ad-sync-configuration";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "user-account";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "user-account";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "ad-sync-configuration";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "ad-sync-configuration";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            organizationalUnit?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "organizational-unit-all-models";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "organizational-unit";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "organizational-unit";
                } | {
                    /** @description The model type of the model being linked to */
                    modelType: components["schemas"]["modelType"];
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "model";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            accountManagement?: unknown;
            customLogicLanguage?: unknown;
            syncedUserInfoBlock?: unknown;
            userSpecificAccess?: unknown;
        };
        "user-group": {
            /** @constant */
            type?: "user-group";
            color?: string;
            internalId?: string;
            uuid: string;
            name?: string;
            groupType?: string;
            isObsolete?: boolean;
            accountable?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "user-group-accountable";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "user-group";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "user-group";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "user-account";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "accountable";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
        };
        "user-specific-access": {
            /** @constant */
            type?: "user-specific-access";
            uuid: string;
            color?: string;
            /** @description UNIX Timestamp */
            expirationDate?: number;
            depth?: string;
            model?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "user-specific-access-all-models";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "user-specific-access";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "user-specific-access";
                } | {
                    /** @description The model type of the model being linked to */
                    modelType: components["schemas"]["modelType"];
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "model";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
            user?: {
                /** @description The uuid of this specific link */
                uuid?: string;
                /** @constant */
                type?: "link";
                /** @constant */
                linkType?: "user-specific-access-user-account";
                links?: ({
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "user-specific-access";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "user-specific-access";
                } | {
                    /**
                     * @description The model type of the model being linked to
                     * @constant
                     */
                    modelType: "user-account";
                    /** @description The uuid of the model being linked to */
                    modelUuid: components["schemas"]["modelUuid"];
                    /**
                     * @description The role this link branch has, eg. a model can have two relations to user-account, one as the owner and one as the reporter, in which case modelType would both be user-account, but role would be owner or reporter
                     * @constant
                     */
                    role: "user-account";
                })[];
                /** @description A free form object containing extra data about this specific link. (Rarely used) */
                metaData?: Record<string, never>;
            }[];
        };
        "widget-dashboard": {
            /** @constant */
            type?: "widget-dashboard";
            internalId?: string;
            uuid: string;
            name?: string;
            color?: string;
            isFavourite?: boolean;
            isPrivate?: boolean;
            isObsolete?: boolean;
            historyModifiedBy?: unknown;
            historyModifiedOn?: unknown;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
